generator client {
  provider      = "prisma-client-js"
  output        = "./.prisma/client"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model admin {
  name     String @id @db.VarChar(255)
  password String @db.VarChar(255)
  email    String @default("") @db.VarChar(255)
}

model city {
  ID          Int     @id @default(autoincrement())
  Name        String  @default("") @db.Char(35)
  CountryCode String  @default("") @db.Char(3)
  District    String  @default("") @db.Char(20)
  Population  Int     @default(0)
  country     country @relation(fields: [CountryCode], references: [Code], onDelete: NoAction, onUpdate: NoAction, map: "city_ibfk_1")

  @@index([CountryCode], map: "CountryCode")
}

model country {
  Code            String            @id @default("") @db.Char(3)
  Name            String            @default("") @db.Char(52)
  Continent       country_Continent @default(Asia)
  Region          String            @default("") @db.Char(26)
  SurfaceArea     Decimal           @default(0.00) @db.Decimal(10, 2)
  IndepYear       Int?              @db.SmallInt
  Population      Int               @default(0)
  LifeExpectancy  Decimal?          @db.Decimal(3, 1)
  GNP             Decimal?          @db.Decimal(10, 2)
  GNPOld          Decimal?          @db.Decimal(10, 2)
  LocalName       String            @default("") @db.Char(45)
  GovernmentForm  String            @default("") @db.Char(45)
  HeadOfState     String?           @db.Char(60)
  Capital         Int?
  Code2           String            @default("") @db.Char(2)
  city            city[]
  countrylanguage countrylanguage[]
}

model countrylanguage {
  CountryCode String                     @default("") @db.Char(3)
  Language    String                     @default("") @db.Char(30)
  IsOfficial  countrylanguage_IsOfficial @default(F)
  Percentage  Decimal                    @default(0.0) @db.Decimal(4, 1)
  country     country                    @relation(fields: [CountryCode], references: [Code], onDelete: NoAction, onUpdate: NoAction, map: "countryLanguage_ibfk_1")

  @@id([CountryCode, Language])
  @@index([CountryCode], map: "CountryCode")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model user {
  id            String    @id
  name          String?
  email         String?   @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  account       account[]
  session       session[]
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

enum country_Continent {
  Asia
  Europe
  North_America @map("North America")
  Africa
  Oceania
  Antarctica
  South_America @map("South America")
}

enum countrylanguage_IsOfficial {
  T
  F
}
